{
	"author": "Zeta Ret, Ivo Yankulovski",
	"description": "Object prototypes for OOP",
	"text": "ProtoSS - Prototype Supers-Subclass",
	"requires": null,
	"version": "1.04",
	"date": "2017 - Today",
	"supername": "ZetaRet_Prototypes",
	"inherits": null,
	"interfaces": null,
	"nohierarchy": "Basic ProtoSS functionality, no instance is generated",
	"static": {
		"public_properties": {},
		"protected_properties": {},
		"private_properties": {},
		"public_methods": {},
		"protected_methods": {},
		"private_methods": {}
	},
	"public_properties": {},
	"protected_properties": {},
	"private_properties": {},
	"public_methods": {
		"ZetaRet_Prototypes": "",
		"rndstr": "l*: Number; return String",
		"super": "args*: function_arguments|Array, cargs*: Array|Boolean, name: String; return Object",
		"superize": "args*: function_arguments|Array, map: Object, setname: Boolean, setown: Boolean, defname: Boolean; return Object",
		"setSuper": "superfn*: Function, fn: Function, name: String; return Function",
		"setSubclass": "fn*: Function, superfn: Function, name: String; return Function",
		"callSuper": "name*: String, args: Array, cname: String; return Object",
		"callSuper2": "name*: String, args: Array, cname: String; return Object",
		"getNextSuper": "name*: String, cname: String; return Function",
		"getSuper": "; return Object",
		"getThis": "; return Object",
		"callProto": "proto*: Function, name*: String, args: Array; return Object",
		"callProto2": "proto*: Object, name*: String, args: Array; return Object",
		"superList": "list*: Array, fn: Function, name: String, defname: Boolean; return Function",
		"getSupers": "fn: Function, name: String; return Array",
		"getSupers2": "fn: Function, name: String; return Array",
		"hasSuper": "sfn*: Function, fn: Function, name: String; return Boolean",
		"is": "sfn*: Function, fn: Function, name: String; return Boolean"
	},
	"protected_methods": {},
	"private_methods": {},
	"static_descriptions": {},
	"descriptions": {
		"rndstr": {
			"l": "generates random string with length of characters",
			"return": "random string"
		},
		"super": {
			"args": "function arguments object if supported, or manually created Array [] with assigned 'callee' reference to the function class object",
			"cargs": "Array used to call 'apply' of the super constructor function, Boolean true will use arguments as call arguments (cargs=args)",
			"name": "String used to define the name of the constructor in the prototype, default __constructor",
			"return": "constructor function result"
		},
		"superize": {
			"args": "function arguments object if supported, or manually created Array [] with assigned 'callee' reference to the function class object",
			"map": "if null will use 'this' object to enumerate all assigned functions, used for member methods, functions in map will be assigned to 'this'",
			"setname": "changes name of iterated function according to key, function.aname",
			"setown": "adds constructor name to function name, requires setname, i.e. 'myfunction#myclass', function.oname",
			"defname": "adds setname and setown to function.name property",
			"return": "with all functions assigned to this function class in particular"
		},
		"setSuper": {
			"superfn": "the super function of fn or this",
			"fn": "if null will use this function, fn extends superfn in effect, fn is subclass of superfn",
			"name": "if null will use default __constructor",
			"return": "superfn will be returned for chain calls"
		},
		"setSubclass": {
			"fn": "fn extends superfn in effect, fn is subclass of superfn",
			"superfn": "if null will use this function, the super function of fn",
			"name": "if null will use default __constructor",
			"return": "superfn will be returned for chain calls"
		},
		"callSuper": {
			"name": "name of super function",
			"args": "array of arguments to apply",
			"cname": "constructor name, if null will use __constructor",
			"return": "result of next super function different than this[name] function"
		},
		"callSuper2": {
			"name": "name of super function",
			"args": "array of arguments to apply",
			"cname": "constructor name, if null will use __constructor",
			"return": "result of super function, may call the same function object as this[name] function"
		},
		"getNextSuper": {
			"name": "search super function by name in super map created by superize",
			"cname": "constructor name, if null will use __constructor",
			"return": "next function in super maps after calling getSupers()"
		},
		"getSuper": {
			"return": "super object map of next super class as it was created by superize"
		},
		"getThis": {
			"return": "super object map of this object as it was created by superize"
		},
		"callProto": {
			"proto": "prototype constructor function of any of the supers, it will use super object map by proto.name",
			"name": "name of the function to call on the super object map",
			"args": "array of arguments to apply",
			"return": "result of the super prototype function as it is defined in its function scope"
		},
		"callProto2": {
			"proto": "super object map obtained from the same object, may simulate by using an Object with assigned 'constructor' from the supers",
			"name": "name of the function to call on the super object map",
			"args": "array of arguments to apply",
			"return": "result of the super prototype function as it is defined in its function scope"
		},
		"superList": {
			"list": "list of constructor functions used as supers",
			"fn": "if null will use this, fn extends aggregate function which calls the list with constructors, the aggregate function uses __constructor_list instead of __constructor",
			"name": "name of constructor, if null will use __constructor",
			"defname": "adds function.name property, aname is always added now",
			"return": "fn for chain calls"
		},
		"getSupers": {
			"fn": "if null will use this",
			"name": "if null will use __constructor",
			"return": "all super constructor functions"
		},
		"getSupers2": {
			"fn": "if null will use this",
			"name": "if null will use __constructor",
			"return": "super constructor function or functions (if super is aggregate will use __constructor_list"
		},
		"hasSuper": {
			"sfn": "super function to check against",
			"fn": "if null will use this, to obtain all supers",
			"name": "if null will use __constructor",
			"return": "true - if it exists in the inheritance tree, otherwise false"
		},
		"is": {
			"sfn": "super function to check against",
			"fn": "if null will use this, to obtain all supers",
			"name": "if null will use __constructor",
			"return": "true - if it exists in the inheritance tree or equals this constructor, otherwise false"
		}
	},
	"static_examples": {},
	"examples": {}
}